<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE task PUBLIC "-//OASIS//DTD DITA General Task//EN" "task.dtd">
<task id="task_zlj_wv3_f3">
    <title>Converting legacy documents into DITA topics</title>
    <shortdesc>Creating DITA topics from existing content is best done by hand rather than machine
        tools. This is because a "content analysis" step needs to be done, and it can be done at the
        same time as conversion to XML.</shortdesc>
    <prolog>
        <author>John Gordon Tait</author>
        <copyright>
            <copyryear year="2012"/>
            <copyrholder>John Gordon Tait</copyrholder>
        </copyright>
        <metadata>
            <keywords>
                <indexterm>naming<indexterm>files</indexterm><indexterm>folders</indexterm></indexterm>
                <indexterm>folders<indexterm>naming</indexterm></indexterm>
                <indexterm>files<indexterm>naming</indexterm></indexterm>
                <indexterm/>
            </keywords>
        </metadata>
    </prolog>
    <taskbody>
        <section>
            <title>Topic type matters less in policy and procedure documents</title>
            <p>Texinfo, DITA and DocBook assume you are writing about some form of computer
                application. Although theey can all be used for any purpose, all have cultural
                baggage.</p>
        </section>
        <section>
            <title>General task topics contact section titles, which are every useful for migrating
                content</title>
        </section>
        <section>
            <title>Section titles allow looser writing like the STOP Report</title>
            <p>In fact, consider the Texinfo generated copy lie [scheme-manual], which puts
                everything on one page.</p>
        </section>
        <section>
            <title>You only need to specialise the one topic type you will use the most</title>
            <p>Your specialised topic for profiling will need to be maintained if you update your
                version of oXygen (always a good idea, since the features and the webhelp options
                are continually improving. Although specialising the topic type is a
                straightforward, mechanical experience, it's still unpleasant and will involve
                testing. It's just unecessary work to specialise topics that you won't use, and
                neater and cheaper not to as well.</p>
        </section>
        <section>
            <title>Make a topic about 1000 words, the length of a couple of pages, or the length of
                a couple of screens</title>
        </section>
        <section>
            <title>Avoid minimalism</title>
            <lq>This uses the "topic" topic, because the specialised topics are associated with the
                computer document tradition. The computer document tradition incorporates ideas like
                minimalism. Minimalism is unsuitable for our procedures and policies because it
                actively encourages experimentation rather than compliance. It has a different
                purpose.</lq>
            <lq>We will use the "topic" topic until such time as we write out own specialised
                topic.</lq>
        </section>
        <section>
            <title>Follow the STOP report</title>
            <p>Written half a century ago, created for technical proposal in large teams, and using
                physical cut-and-paste methods, the STOP Reoprt still provides the best "topicising"
                instructions I've seen.</p>
        </section>
        <section><title>Tiny topics <i>don't</i> help readers</title><p/>
            <p>DITA proponents will stress topicising into small topics, when in fact it makes
                managing things harder. Conditional text is one idea that DITA really gets right,
                because it reduces the number of files you'll need to manage.</p>
            <p>Small topics will mean a small amont of information is displayed on a web page
                rendering. This won't help the reader <i>one bit</i>, and will likely irritate them.
                Following STOP, common sense, and common experience of reading all kinds of
                web-sites and blogs, what really works is a coherent and complete two or three
                screens of text.</p><p>Resist the urge to topicise everything down to the smallest
                chunks you can. It doesn't really help anyone (including writers and reviewer),
                gives you more to manage, and doesn't serve the reader. Why do it?</p><p>It's
                important to realise that the literature on DITA usually assumes that you are
                managing a team of writers to manage documentation to a product. There might be
                variants to the product, and the products might need to be documented in different
                lanaguages. Because translation is expensive, there is a move towards translating as
                little unique content as possible. That is, DITA can be used to keep <i>costs</i>
                down.</p>DITA content written this way has an unsettling look and feel that is quite
            apart from the DITA-OT. It seems choppy, disconnected, and somehow inauthentic, like
            spam email.<p>None of this is needed or necessary when writtng policies and
                procedures.</p><p>Consider using the <codeph>chunk</codeph> attribute with
                    <codeph>select branch</codeph> to group topics together in DiTA-OT XHTML
                renderings. This works well with topics grouped under a <codeph>topichead</codeph>
                element.</p><p>Even consider grouping a whole map on a single web page, no matter
                how large, using <codeph>&lt;map chunk="by-document
            to-content"></codeph></p></section>
        <section>
            <title>Every page is not really page one</title>
            <p>An expression "every page is page one" refers to the idea that a reader can read any
                part of the document first. It's an idea applicable to the web (and hypertext in
                general), and actually to any reference material that can be searched by a page
                turn, word search, index, tag, or search engine reference.</p>
            <p>It's a good idea to some extent, because expecting a reader to sit down with a
                standard (even a mandatory one) and read it in sequence is unrealistic. Like many
                ideas, though, it starts to break down when taken beyond practical or common sense
                limits.</p>
            <p>There is always going to be an inevitable gap between a comprehensive and complete
                documentation set, and one that is easily usable. There needs to be some kind of
                management descision backed up with any combination of search tools, briefing
                material, and training to bridge this. It needs to be an ongoing question.</p>
            <p>It isn't solved by fragmenting the content to such an extent that <i>no</i> prior
                knowldege is assumed, or that there isn't some kind of progression to the
                material.</p>
            <p>Whether your material is in a sequence of process steps, conceptual understanding,
                technical difficulty, importance (e.g. with guidance material appearing after
                mandatory), etc. your material is going to be in <i>some</i> kind of order. It will
                most likely be in a mixture.</p>
            <p>This might seem obvious if you are an experienced writer, but it's different to some
                of the expectations that technical writers working on product documentation are used
                to dealing with.</p>
            <p>As before, "reasonably self-contained topics that could be read out-of-sequence" is
                probably the most practical and realistic approach.</p>
        </section>
        <section>
            <title>Use lower case rather than upper case and use the underscore character rather
                than a space</title>
            <p>In DITA file names, use lower case except when it would be perverse not to do so,
                e.g. in organization names. Use an underscore character.</p>
            <p>For example, an example is <codeph>naming_files_and_folders.dita</codeph>.</p>
        </section>
        <section>
            <title>Put legacy structurall features at the end of titles, in brackets</title>
            <p>In migration projects, it's quite possible that you will want to keep a record of
                original titles. This might help to to complete a migration, or it might help
                existing readers who are used to referring to a document called "PROC 1234", or an
                appendix called "Appendix A".</p>
            <p>Try to be helpful to your readers.</p>
            <p>For example, as a topic title or the title of a map.</p>
            <lq>How to clear a spill (PROC 1234)</lq>
            <p>For example, in an appendix:</p>
            <lq>How to apply for a deviation (Appendix A)</lq>
            <p>This has the triple purpose of:<ul id="ul_icl_f1x_f3">
                    <li>deprecating these structural elements, when all you really want to worry
                        about is topic title and maps</li>
                    <li>maintain a record of where the topic or section element came from, visible
                        even in the map (for topic titles)</li>
                    <li>allowing you to quietly drop the structural elements in the future without
                        significantly altering the title.</li>
                </ul></p>
        </section>
        <section>
            <title>Always analyse the content first</title>
            <p>Before attempting to migrate existing content into DITA, always do a content analysis
                step first. </p>
        </section>
        <section>
            <title>Export the content without line breaks</title>
        </section>
    </taskbody>
</task>
