<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE task PUBLIC "-//OASIS//DTD DITA General Task//EN" "task.dtd">
<task id="task_ef3_wxd_f3">
    <title>Content management systems</title>
    <shortdesc>Content management systems are probably required for mature, large, established
        projects. However, due to the medium-term lifespan of policy and procedure documents,
        consider carefully if one is really needed. For new authors, modular writing, XML, DITA, and
        XML editors such as oXygen already provide a significant learning curve.</shortdesc>
    <prolog>
        <author>John Gordon Tait</author>
        <copyright>
            <copyryear year="2012"/>
            <copyrholder>John Gordon Tait</copyrholder>
        </copyright>
    </prolog>
    <taskbody>
        <section><title>Lock metadata safely inside the topics</title><p>Most  content management system have some kinds of metadata associated with each file such as
                owner, permissions, audience, creation and review dates, etc. These are generally
                held in a database and are not part of this file itself.</p>
            <p>Content management systems buiilt around DITA will modify metadata inside the DITA
                maps and topics, where the metadata will be held, i.e. you use the CMS interface to
                change the file.</p>
            <p>However, it's very easy to just add the metadata in yourself using your text editor.
                The metadata will be held inside the file, will be permenently associated with it,
                and will be easily adjustable and visible.</p>
            <p>A CMS can report where DITA topic files are referred to in maps. If you use your map
                in oXygen's DITA Maps Manager, you can do much this same thing by opening the
                context menu ("right clicking" and choosing "Search References". In you've referred
                to this by a conref, oxYgen will report this at the bottom of the screen. This gives
                you an excellent two-way view of the material, i.e. you can see in your topics the
                transcluded material, and you can view where transcluded material is used.</p>
            <p>(This is simillar functionality to the requirements tool IBM DOORS, but DITA has far
                better publishing abilities. DOORS can't transclude text; it can just link to
                it.)</p>
            <p>I'm not yet totally convinced that a dedicated CMS is really needed for say, around
                100 documents constructed of a few hundred topics. OXygen and DITA is <i>itself</i>
                a content management system, albeit one that needs some kind of back-up.</p>
            <p>The advantage with an open standard like DITA is that if you want to introduce a
                formal web-based CMS later, or if an amazing product comes of the market or is
                available on the web, your content will already be prepared to be imported.</p>
            <p>Try out a CMS if a time-limited trial is available to you. But also consider if
                learning XML, DITA, modular writing and single sourcing are enough to handle without
                introducing a major software project like a CMS.</p></section>
        <section>
            <title>View DITA as a text-based database</title>
            <p>Another reason why a CMS might not be necessary is that you can view DITA files as a
                plain text database. This is, you can build a complex document populated with
                various types of data without going near a scripting language (PHP, etc.) on a web
                server, and without a traditional database. This radically lowers the barrier to
                entry for this, and puts this control in the hands of the writer and manager.</p>
            <p>(Emacs' excellent Org-mode proudly discusses its plain text sources, and I think DITA
                could easily do the same.)</p>
            <p>The renderings of the files (html, PDF, etc.) are necessarily static, but that is
                what is expected with published standards anyway: they are relied on to have stable
                content and simple versioning and publication dates.</p>
        </section>
 
        <section>
            <title>Corporate shared drives might be enough</title>
            <p>Speaking of backing up, if you are on a corporate shared drive, they are usually
                backed up anyway and you can recover lost folders if you happen to ruin your work.
                It might be worth checking what data recovery processes your organisation already
                has.</p>
        </section>
        <section>
            <title>Find in files</title>
            <p>OXygen's "Find in files" is excellent.</p>
        </section>
        <section>
            <title>DITA are just text files, so consider a coder's solution</title>
            <p>DITA files are plan text XML files and are the type of files that software developers
                are used to managing. Often, coders have deveoped better solutions to mamaging
                content than the corporate documentation world.</p>
            <p>I project managed this book using a program called git. Git is probably the most
                powerful software I know of for managing a book, and it's overkill, but it's also
                easy to use if you can use the command line.</p>
            <p>In your project file, type</p>
            <codeblock>git init</codeblock>
            <p>This creates a file called <codeph>.git</codeph> that tracks all the changes. You can
                delte whole subfolders and files, and switch new ones in, and git will work it all
                out on your bahelf. Great when on the move.</p>
            <p>When you want to commit ("save") your work, type:</p>
            <codeblock>git add .</codeblock>
            <p>where the dot means everything in the folder, then</p>
            <codeblock>git commit -m 'write a small message about the changes'</codeblock>
            <p>then, to get it online</p>
            <codeblock>git push origin master</codeblock>
            <p>Then you just type in username a password and it's done.</p>
        </section>
    </taskbody>
</task>
