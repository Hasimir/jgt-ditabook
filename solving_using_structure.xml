<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE task PUBLIC "-//OASIS//DTD DITA General Task//EN" "task.dtd">
<task id="task_ayn_d15_w3">
    <title>Solving authoring problems using structured documents</title>
    <shortdesc>Standards are usually written using common Office tools such as Microsoft Word. This
        short article is a manifesto for an alternative approach for standards bodies.</shortdesc>
    
    <taskbody>
        <section>
            <title>Writing standards using traditional tools</title>
            <p>Standards documents are usually managed by small dedicated teams. The content comes
                from experts in their fields. These subject matter experts usually don't care too
                much about documentation because their expertise lies in other areas.</p>
            <p>Standards are designed to be <i>complied</i> with, or they specify that a process or
                item <i>conforms</i> to it. They are usually written as instructions, or might use
                the words "shall" and "should" to specify a requirement or guidance,
                respectively.</p>
            <p>It is the nature of this type of work to go out of date as organisations and roles
                change, and new processes need documented. Because standards are complex (made of
                many parts) and complicated (full of specialist technical material), maintaining
                these documents is difficult and time consuming.</p>
            <p>Standards can have multiple authors for their different parts, and the different
                parts can be updated at different times. The entire document will usually need to be
                reviewed formally by multiple stakeholders, and their comments somehow incorporated
                into this complex document.</p>
            <p>To help navigate these documents, they usually contain cross-references to other
                parts of the document. These cross-references will themselves need to be updated
                manually, or at least checked manually because, as different authors add and remove
                different sections, there to no guarantee that the document will still hang
                together. Cross-references, while useful to the reader, also bring their own burden
                of page-turning and sense-making.</p>
            <p>Standards documents are also usually part of a wider set or family of other documents
                which can cite each other using references. Standards authors will need to check
                these each time. References to other standards can be checked by following the
                reference, and reference from other standards will require some knowledge of the
                subject matter.</p>
            <p>Standards processes work because they are collaborative and tested with their
                stakeholders. But the traditional processes for developing them are labour-intensive
                and prone to mistakes without a diligent manager and editorial team.</p>
        </section>
        <section><title>Common problems using word-processors such as Word</title>
            <p>Standards are often written using Word. Word is easy to use. Word works well with
                medium-sized standalone documents. It doesn't work so well when it is used to
                maintain a suite of inter-related standards. This is because Word documents are
                unstructured.</p>
            <p>There are several common problems:<ul id="ul_lfn_hb5_w3">
                    <li>It's hard to combine Word documents. They are not meant to be easily
                        combined. Because authors can easily override default styles, combining them
                        is haphazard and can provide unpredictable results.</li>
                    <li>There's no means of filtering content for different uses. (This is called
                        "conditional profiling".) This means that content will need to be re-written
                        for different audiences.</li>
                    <li>There's no means of pulling small amount of information from one document
                        into another. This means that common wording will need to be cut-and-pasted
                        from one document into another. There is no way to keep track of this.</li>
                    <li>Large Word documents are unwieldy, inconsistent, and tend to show signs of
                        distress after 50 pages. They just don't scale. There's too many way to
                        achieve the same thing.</li>
                </ul></p>
            <p>These aren't really faults with Word. It's just isn't designed for technical
                documentation. Document authors and managers often really need something else.</p></section>
        <section>
            <title>Using a structured authoring technique: DITA</title>
            <p>DITA (DITA Information Typing Architecture) is an open standard based on XML
                technology. It provides a solution for these technical authoring problems, and could
                form a much better basis for maintaining a suite of inter-related technical
                material.</p>
            <p>DITA files are <i>highly</i> structured. Authoring in DITA is quite different from
                authoring in Word and comes with a steep learning curve. It provides a very sound
                basis for technical standards because it has:<ul id="ul_ell_4d5_w3">
                    <li>an <i>assembly</i> mechanism, which allow you to combine material in many
                        ways and allows the same material to appear in more than one document</li>
                    <li>a <i>conditional profiling</i> mechanism, which allows you to adapt content
                        for different uses</li>
                    <li>a <i>transclusion</i> mechanism, which allows you to insert or push small
                        amount of text into your document from elsewhere, solving the cut-and-paste
                        problem.</li>
                </ul></p>
            <p>I use the word "document", but DITA can most easy produce XHTML pages for hosting on
                the web. PDF documents and EPUB ebook can also be produced easily. Rather than
                producing documents, consider XHTML output as the default, with a web browser as a
                universal document reader.</p>
        </section>
        <section>
            <title>Using oXygen Author to produce DITA content</title>
            <p>DITA is a standard, not a product, and there are many ways to produce and manage DITA
                content. Some of these would require considerable investment and configuration.</p>
            <p>Rather than explore all the options available, I'll limit it to a single product:
                &lt;oXygen/> XML Author (which I'll call "oXygen").</p>
            <p>oXygen comes bundled and preconfigured which the DITA-OT, which is an open source
                package that serves as a reference implementation for DITA (i.e. it follows the DITA
                specification closely). It also comes with the DITA for Publishers EPUB plug-in,
                which allows easy production of ebooks.</p>
            <p>It's worth considering oXygen as a high powered word-processor for information
                professionals that can be used as a stand-alone application to get things done. It
                can produce web-sites and documents.</p>
        </section>
        <section>
            <title>Essential reading</title>
            <p>This book won't discuss how to produce DITA content in much technical detail. This
                material is covered elsewhere in some excellent DITA reference material. I highly
                recommend the following:</p>
            <p>
                <ul id="ul_orv_djb_x3">
                    <li><cite>DITA Best Practices</cite>, produced by DITA-originators IBM, contains
                        an excellent introduction and examples specifically aimed at authors. It
                        does assume you are writing computer product tri-pane help, but otherwise is
                        very helpful. It is an excellent, portable summary and is an essential
                        purchase.</li>
                    <li><cite>DITA for Practitioners Volume 1</cite> is an advanced DITA book by
                        Eliot Kimber, and serves as natural further reading after <cite>DITA Best
                            Practices</cite>. I also used Eliot Kimber's <cite>"DITA Configuration
                            and Specialization Tutorials</cite>, available from <xref
                            href="http://www.xiruss.org/tutorials/dita-specialization/"
                            scope="external" type="html"
                            >http://www.xiruss.org/tutorials/dita-specialization/</xref>, to
                        specialise a profiling attribute. (It's covered in the book, but I found the
                        tutorial clearer.) </li>
                    <li>The <cite>DITA 1.2 specification</cite>, hosted at <xref
                        href="http://docs.oasis-open.org/dita/v1.2/spec/DITA1.2-spec.html"
                            scope="external" type="html"/>, provides the official specification. It
                        looks pretty fearsome if you aren't an XML expert, but it gives the final
                        answer to difficult questions. Best of all, it provides many very helpful
                        examples. </li>
                    <li>
                        <cite>The &lt;oXygen> Users Manual</cite>, available from within oXygen
                            and on the web, provides DITA-specific examples.
                    </li>
                </ul>
            </p>
            <p>This book will cover some of the areas not specifically addressed in this
                list.</p>
        </section>
    </taskbody>
</task>
